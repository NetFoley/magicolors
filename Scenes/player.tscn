[gd_scene load_steps=21 format=3 uid="uid://end5hd6isluf"]

[ext_resource type="Script" path="res://Scenes/player.gd" id="1_yk7i2"]
[ext_resource type="Texture2D" uid="uid://30leiholxpcn" path="res://res/0x72_DungeonTilesetII_v1.4.png" id="2_spkwe"]
[ext_resource type="AudioStream" uid="uid://b2gvfgpxvu0ii" path="res://Sound/Retro HiTech 16.wav" id="3_84u7i"]

[sub_resource type="Shader" id="Shader_pk5jj"]
code = "shader_type canvas_item;

uniform bool redded = false;

void fragment(){
	if (redded && COLOR.b > 0.5 && COLOR.r < 0.5){
		COLOR.r = COLOR.b*1.1;
		COLOR.b = COLOR.r*0.25;
		COLOR.g = COLOR.g * 0.3;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_d3jrh"]
resource_local_to_scene = true
shader = SubResource("Shader_pk5jj")
shader_parameter/redded = false

[sub_resource type="AtlasTexture" id="AtlasTexture_vjbdt"]
atlas = ExtResource("2_spkwe")
region = Rect2(128, 160, 16, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_ul6h4"]
atlas = ExtResource("2_spkwe")
region = Rect2(144, 160, 16, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_dtr64"]
atlas = ExtResource("2_spkwe")
region = Rect2(160, 160, 16, 32)

[sub_resource type="AtlasTexture" id="AtlasTexture_8k8yu"]
atlas = ExtResource("2_spkwe")
region = Rect2(176, 160, 16, 32)

[sub_resource type="SpriteFrames" id="SpriteFrames_pqpq7"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_vjbdt")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_ul6h4")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_dtr64")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_8k8yu")
}],
"loop": true,
"name": &"default",
"speed": 4.02
}, {
"frames": [],
"loop": true,
"name": &"new_animation",
"speed": 5.0
}]

[sub_resource type="Animation" id="Animation_nsb35"]
resource_name = "Idle"
length = 0.45
loop_mode = 1
step = 0.05
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("AnimNode:skew")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [0.122173, -0.122173]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("AnimNode:scale")
tracks/1/interp = 2
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3),
"transitions": PackedFloat32Array(1, 1, 1, 1),
"update": 0,
"values": [Vector2(1, 1), Vector2(1, 1.075), Vector2(1, 1), Vector2(1, 1.075)]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_psdt3"]
_data = {
"Idle": SubResource("Animation_nsb35")
}

[sub_resource type="Animation" id="Animation_w1xl1"]
resource_name = "Cast"
length = 3.0
step = 0.05
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1, 1.05, 1.1, 1.15, 1.2, 1.25, 1.3, 1.35, 1.4, 1.45, 1.5, 1.55, 1.6, 1.65, 1.7, 1.75, 1.8, 1.85, 2, 3),
"transitions": PackedFloat32Array(0.5, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.659754, 1),
"update": 0,
"values": [Vector2(-2.39305, -5.23644), Vector2(3.15174, -5.05911), Vector2(0.868888, -4.87821), Vector2(1.08632, -4.88462), Vector2(-2.11501, -5.63023), Vector2(0.218498, -2.22136), Vector2(0.424435, 0.927126), Vector2(2.78838, -0.395372), Vector2(3.83185, -3.75312), Vector2(6.31098, -3.36215), Vector2(2.17853, -4.88744), Vector2(-2.4709, -6.92815), Vector2(-0.262345, -1.29516), Vector2(1.53614, -0.00316048), Vector2(4.74005, 2.42717), Vector2(11.9138, -2.44137), Vector2(4.1686, -5.12927), Vector2(5.23756, 1.10684), Vector2(3.38726, -4.37165), Vector2(5, -5), Vector2(0, 0)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 1, 1.05, 1.1, 2, 3),
"transitions": PackedFloat32Array(0.5, 1, 1, 1, 0.659754, 1),
"update": 0,
"values": [0.0, 0.833827, 0.861622, 0.874787, 1.11177, 0.0]
}

[sub_resource type="Animation" id="Animation_sgxwt"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:position")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(-2.39305, -5.23644)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".:rotation")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_is0cx"]
_data = {
"Cast": SubResource("Animation_w1xl1"),
"RESET": SubResource("Animation_sgxwt")
}

[sub_resource type="Curve" id="Curve_aa7ya"]
_data = [Vector2(0, 0), 0.0, 1.80345, 0, 0, Vector2(0.848754, 1), 0.0, 0.0, 0, 0, Vector2(1, 0.00361001), 0.417153, 0.0, 0, 0]
point_count = 3

[sub_resource type="CurveTexture" id="CurveTexture_ksbqg"]
curve = SubResource("Curve_aa7ya")

[sub_resource type="ParticleProcessMaterial" id="ParticleProcessMaterial_77sv5"]
particle_flag_disable_z = true
gravity = Vector3(0, 10, 0)
angular_velocity_min = -720.0
angular_velocity_max = 720.0
orbit_velocity_min = 0.0
orbit_velocity_max = 0.0
damping_min = 5.0
damping_max = 5.0
scale_curve = SubResource("CurveTexture_ksbqg")
color = Color(0.184314, 0.282353, 1, 0.423529)
hue_variation_min = -1.0
hue_variation_max = 1.0
turbulence_noise_scale = 0.77
turbulence_influence_min = 0.04
turbulence_influence_max = 0.04

[sub_resource type="Shader" id="Shader_8ixhi"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.0.1.rc1's ParticleProcessMaterial.

shader_type particles;
uniform vec3 direction;
uniform float spread;
uniform float flatness;
uniform float initial_linear_velocity_min;
uniform float initial_angle_min;
uniform float angular_velocity_min;
uniform float orbit_velocity_min;
uniform float linear_accel_min;
uniform float radial_accel_min;
uniform float tangent_accel_min;
uniform float damping_min;
uniform float scale_min;
uniform float hue_variation_min;
uniform float anim_speed_min;
uniform float anim_offset_min;
uniform float initial_linear_velocity_max;
uniform float initial_angle_max;
uniform float angular_velocity_max;
uniform float orbit_velocity_max;
uniform float linear_accel_max;
uniform float radial_accel_max;
uniform float tangent_accel_max;
uniform float damping_max;
uniform float scale_max;
uniform float hue_variation_max;
uniform float anim_speed_max;
uniform float anim_offset_max;
uniform float lifetime_randomness;
uniform vec3 emission_ring_axis;
uniform float emission_ring_height;
uniform float emission_ring_radius;
uniform float emission_ring_inner_radius;
uniform vec4 color_value : source_color;
uniform vec3 gravity;


float rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float rand_from_seed_m1_p1(inout uint seed) {
	return rand_from_seed(seed) * 2.0 - 1.0;
}

uint hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

void start() {
	uint base_number = NUMBER;
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	float tex_angle = 0.0;
	float tex_anim_offset = 1.0;
	float spread_rad = spread * degree_to_rad;
	if (RESTART_VELOCITY) {
		float tex_linear_velocity = 1.0;
		{
			float angle1_rad = rand_from_seed_m1_p1(alt_seed) * spread_rad;
			angle1_rad += direction.x != 0.0 ? atan(direction.y, direction.x) : sign(direction.y) * (pi / 2.0);
			vec3 rot = vec3(cos(angle1_rad), sin(angle1_rad), 0.0);
			VELOCITY = rot * mix(initial_linear_velocity_min,initial_linear_velocity_max, rand_from_seed(alt_seed));
		}
	}
	float base_angle = (tex_angle) * mix(initial_angle_min, initial_angle_max, angle_rand);
	CUSTOM.x = base_angle * degree_to_rad;
	CUSTOM.y = 0.0;
	CUSTOM.w = (1.0 - lifetime_randomness * rand_from_seed(alt_seed));
	CUSTOM.z = (tex_anim_offset) * mix(anim_offset_min, anim_offset_max, anim_offset_rand);
	if (RESTART_POSITION) {
		float ring_spawn_angle = rand_from_seed(alt_seed) * 2.0 * pi;
		float ring_random_radius = rand_from_seed(alt_seed) * (emission_ring_radius - emission_ring_inner_radius) + emission_ring_inner_radius;
		vec3 axis = normalize(emission_ring_axis);
		vec3 ortho_axis = vec3(0.0);
		if (axis == vec3(1.0, 0.0, 0.0)) {
			ortho_axis = cross(axis, vec3(0.0, 1.0, 0.0));
		} else {
 			ortho_axis = cross(axis, vec3(1.0, 0.0, 0.0));
		}
		ortho_axis = normalize(ortho_axis);
		float s = sin(ring_spawn_angle);
		float c = cos(ring_spawn_angle);
		float oc = 1.0 - c;
		ortho_axis = mat3(
			vec3(c + axis.x * axis.x * oc, axis.x * axis.y * oc - axis.z * s, axis.x * axis.z *oc + axis.y * s),
			vec3(axis.x * axis.y * oc + s * axis.z, c + axis.y * axis.y * oc, axis.y * axis.z * oc - axis.x * s),
			vec3(axis.z * axis.x * oc - axis.y * s, axis.z * axis.y * oc + axis.x * s, c + axis.z * axis.z * oc)
			) * ortho_axis;
		ortho_axis = normalize(ortho_axis);
		TRANSFORM[3].xyz = ortho_axis * ring_random_radius + (rand_from_seed(alt_seed) * emission_ring_height - emission_ring_height / 2.0) * axis;
	if (RESTART_VELOCITY) VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
	TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
	VELOCITY.z = 0.0;
	TRANSFORM[3].z = 0.0;
	}
}

void process() {
	uint base_number = NUMBER;
	uint alt_seed = hash(base_number + uint(1) + RANDOM_SEED);
	float angle_rand = rand_from_seed(alt_seed);
	float scale_rand = rand_from_seed(alt_seed);
	float hue_rot_rand = rand_from_seed(alt_seed);
	float anim_offset_rand = rand_from_seed(alt_seed);
	float pi = 3.14159;
	float degree_to_rad = pi / 180.0;

	CUSTOM.y += DELTA / LIFETIME;
	float tv = CUSTOM.y / CUSTOM.w;
	float tex_linear_velocity = 1.0;
	float tex_orbit_velocity = 1.0;
	float tex_angular_velocity = 1.0;
	float tex_linear_accel = 1.0;
	float tex_radial_accel = 1.0;
	float tex_tangent_accel = 1.0;
	float tex_damping = 1.0;
	float tex_angle = 1.0;
	float tex_anim_speed = 1.0;
	float tex_anim_offset = 1.0;
	vec3 force = gravity;
	vec3 pos = TRANSFORM[3].xyz;
	
	pos.z = 0.0;
	// apply linear acceleration
	force += length(VELOCITY) > 0.0 ? normalize(VELOCITY) * tex_linear_accel * mix(linear_accel_min, linear_accel_max, rand_from_seed(alt_seed)) : vec3(0.0);
	// apply radial acceleration
	vec3 org = EMISSION_TRANSFORM[3].xyz;
	vec3 diff = pos - org;
	force += length(diff) > 0.0 ? normalize(diff) * tex_radial_accel * mix(radial_accel_min, radial_accel_max, rand_from_seed(alt_seed)) : vec3(0.0);
	// apply tangential acceleration;
	float tangent_accel_val = tex_tangent_accel * mix(tangent_accel_min, tangent_accel_max, rand_from_seed(alt_seed));
	force += length(diff.yx) > 0.0 ? vec3(normalize(diff.yx * vec2(-1.0, 1.0)), 0.0) * tangent_accel_val : vec3(0.0);
	force += ATTRACTOR_FORCE;

	// apply attractor forces
	VELOCITY += force * DELTA;
	VELOCITY -= pos*0.1;
	
	// orbit velocity
	float orbit_amount = tex_orbit_velocity * mix(orbit_velocity_min, orbit_velocity_max, rand_from_seed(alt_seed));
	if (orbit_amount != 0.0) {
	     float ang = orbit_amount * DELTA * pi * 2.0;
	     mat2 rot = mat2(vec2(cos(ang), -sin(ang)), vec2(sin(ang), cos(ang)));
	     TRANSFORM[3].xy -= diff.xy;
	     TRANSFORM[3].xy += rot * diff.xy;
	}
	float dmp = mix(damping_min, damping_max, rand_from_seed(alt_seed));
	if (dmp * tex_damping > 0.0) {
		float v = length(VELOCITY);
		float damp = tex_damping * dmp;
		v -= damp * DELTA;
		if (v < 0.0) {
			VELOCITY = vec3(0.0);
		} else {
			VELOCITY = normalize(VELOCITY) * v;
		}
	}
	float base_angle = (tex_angle) * mix(initial_angle_min, initial_angle_max, rand_from_seed(alt_seed));
	base_angle += CUSTOM.y * LIFETIME * (tex_angular_velocity) * mix(angular_velocity_min,angular_velocity_max, rand_from_seed(alt_seed));
	CUSTOM.x = base_angle * degree_to_rad;
	CUSTOM.z = (tex_anim_offset) * mix(anim_offset_min, anim_offset_max, rand_from_seed(alt_seed)) + tv * tex_anim_speed * mix(anim_speed_min, anim_speed_max, rand_from_seed(alt_seed));
	vec3 tex_scale = vec3(1.0);
	float tex_hue_variation = 1.0;
	float hue_rot_angle = (tex_hue_variation) * pi * 2.0 * mix(hue_variation_min, hue_variation_max, rand_from_seed(alt_seed));
	float hue_rot_c = cos(hue_rot_angle);
	float hue_rot_s = sin(hue_rot_angle);
	mat4 hue_rot_mat = mat4(vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.299, 0.587, 0.114, 0.0),
			vec4(0.000, 0.000, 0.000, 1.0)) +
		mat4(vec4(0.701, -0.587, -0.114, 0.0),
			vec4(-0.299, 0.413, -0.114, 0.0),
			vec4(-0.300, -0.588, 0.886, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_c +
		mat4(vec4(0.168, 0.330, -0.497, 0.0),
			vec4(-0.328, 0.035,  0.292, 0.0),
			vec4(1.250, -1.050, -0.203, 0.0),
			vec4(0.000, 0.000, 0.000, 0.0)) * hue_rot_s;
	COLOR = hue_rot_mat * color_value;

	TRANSFORM[0] = vec4(cos(CUSTOM.x), -sin(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[1] = vec4(sin(CUSTOM.x), cos(CUSTOM.x), 0.0, 0.0);
	TRANSFORM[2] = vec4(0.0, 0.0, 1.0, 0.0);
	TRANSFORM[3].z = 0.0;
	float base_scale = mix(scale_min, scale_max, scale_rand);
	base_scale = sign(base_scale) * max(abs(base_scale), 0.001);
	TRANSFORM[0].xyz *= base_scale * sign(tex_scale.r) * max(abs(tex_scale.r), 0.001);
	TRANSFORM[1].xyz *= base_scale * sign(tex_scale.g) * max(abs(tex_scale.g), 0.001);
	TRANSFORM[2].xyz *= base_scale * sign(tex_scale.b) * max(abs(tex_scale.b), 0.001);
	if (CUSTOM.y > CUSTOM.w) {
		ACTIVE = false;
	}
}

"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_1pfgn"]
shader = SubResource("Shader_8ixhi")
shader_parameter/direction = Vector3(1, 0, 0)
shader_parameter/spread = 45.0
shader_parameter/flatness = 0.0
shader_parameter/initial_linear_velocity_min = 0.0
shader_parameter/initial_angle_min = -360.0
shader_parameter/angular_velocity_min = 0.0
shader_parameter/orbit_velocity_min = 0.0
shader_parameter/linear_accel_min = 0.0
shader_parameter/radial_accel_min = 0.0
shader_parameter/tangent_accel_min = 0.0
shader_parameter/damping_min = 0.0
shader_parameter/scale_min = 1.505
shader_parameter/hue_variation_min = -8.673
shader_parameter/anim_speed_min = 0.0
shader_parameter/anim_offset_min = 0.0
shader_parameter/initial_linear_velocity_max = 0.0
shader_parameter/initial_angle_max = 0.0
shader_parameter/angular_velocity_max = 0.0
shader_parameter/orbit_velocity_max = 0.0
shader_parameter/linear_accel_max = 0.0
shader_parameter/radial_accel_max = 0.0
shader_parameter/tangent_accel_max = 0.0
shader_parameter/damping_max = 0.0
shader_parameter/scale_max = 3.914
shader_parameter/hue_variation_max = 4.296
shader_parameter/anim_speed_max = 0.0
shader_parameter/anim_offset_max = 0.0
shader_parameter/lifetime_randomness = 0.0
shader_parameter/emission_ring_axis = Vector3(0, 0, 1)
shader_parameter/emission_ring_height = 1.0
shader_parameter/emission_ring_radius = 50.0
shader_parameter/emission_ring_inner_radius = 50.0
shader_parameter/color_value = Color(0.0666667, 0, 1, 1)
shader_parameter/gravity = Vector3(0, 0, 0)

[node name="Player" type="Node2D"]
texture_filter = 1
script = ExtResource("1_yk7i2")

[node name="AnimNode" type="Node2D" parent="."]
scale = Vector2(1, 1.04762)
skew = 0.0701417

[node name="AnimatedSprite2D2" type="AnimatedSprite2D" parent="AnimNode"]
material = SubResource("ShaderMaterial_d3jrh")
position = Vector2(-0.117188, 0)
scale = Vector2(1, 1.063)
sprite_frames = SubResource("SpriteFrames_pqpq7")
offset = Vector2(0, -16)

[node name="AnimationPlayer" type="AnimationPlayer" parent="AnimNode/AnimatedSprite2D2"]
root_node = NodePath("../../..")
speed_scale = 0.2
libraries = {
"": SubResource("AnimationLibrary_psdt3")
}

[node name="Node2D" type="Node2D" parent="AnimNode"]
position = Vector2(10, -18)
scale = Vector2(-1, 1)

[node name="Sprite2D" type="Sprite2D" parent="AnimNode/Node2D"]
position = Vector2(-2.39305, -5.23644)
texture = ExtResource("2_spkwe")
region_enabled = true
region_rect = Rect2(320, 144, 16, 32)

[node name="AnimationPlayer" type="AnimationPlayer" parent="AnimNode/Node2D/Sprite2D"]
libraries = {
"": SubResource("AnimationLibrary_is0cx")
}

[node name="GPUParticles2D" type="GPUParticles2D" parent="AnimNode/Node2D/Sprite2D"]
position = Vector2(-0.95674, -10.4947)
amount = 9
process_material = SubResource("ParticleProcessMaterial_77sv5")
lifetime = 3.0
trail_lifetime = 0.06

[node name="GPUParticles2D" type="GPUParticles2D" parent="."]
position = Vector2(0, -42)
emitting = false
process_material = SubResource("ShaderMaterial_1pfgn")
lifetime = 0.88
one_shot = true
explosiveness = 0.73
local_coords = true
trail_lifetime = 0.11
trail_sections = 2
trail_section_subdivisions = 1

[node name="Timer" type="Timer" parent="."]
wait_time = 3.0
one_shot = true
autostart = true

[node name="CastSound" type="AudioStreamPlayer2D" parent="."]
stream = ExtResource("3_84u7i")
